import { Request, Response } from 'express';
import axios from 'axios';
import Weather from './userModel';

const GEOCODING_API_URL = `https://api.api-ninjas.com/v1/geocoding?${city}=
London
${country}=
England
`;
const WEATHER_API_URL = 'https://weatherapi-com.p.rapidapi.com/current.json';

const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
const fetchCoordinatesWithRetry = async (city: string, country: string, geocodingApiKey: string) => {
  while (true) {
    try {
      const response = await axios.get(GEOCODING_API_URL, {
        params: { city, country },
        headers: { 'X-Api-Key': geocodingApiKey },
      });
      return response.data[0];
    } catch (error:any) {
      if (error.response && error.response.status === 429) {
        console.log('Rate limit exceeded, retrying in 60 seconds...');
        await delay(60000); // Wait for 60 seconds before retrying
      } else {
        throw error;
      }
    }
  }
};

// Function to fetch weather with retry on rate limit error
const fetchWeatherWithRetry = async (latitude: number, longitude: number, weatherApiKey: string) => {
  while (true) {
    try {
      const response = await axios.get(WEATHER_API_URL, {
        params: { key: weatherApiKey, q: `${latitude},${longitude}` },
      });
      return response.data.current.condition.text;
    } catch (error:any) {
      if (error.response && error.response.status === 429) {
        console.log('Rate limit exceeded, retrying in 60 seconds...');
        await delay(60000); // Wait for 60 seconds before retrying
      } else {
        throw error;
      }
    }
  }
};


export const saveWeatherMapping = async (
  req: Request,
  res: Response,
  geocodingApiKey: string,
  weatherApiKey: string
) => {
  try {
    const cities = req.body;

    if (!Array.isArray(cities) || cities.some(city => !city.city || !city.country)) {
      return res.status(400).json({ error: 'Invalid input format' });
    }

    const weatherDataPromises = cities.map(async (city: { city: string; country: string }) => {
      const { latitude, longitude } = await fetchCoordinatesWithRetry(city.city, city.country, geocodingApiKey);
      const weather = await fetchWeatherWithRetry(latitude, longitude, weatherApiKey);
      const time = new Date();

      const weatherRecord = {
        city: city.city,
        country: city.country,
        weather,
        time,
        longitude,
        latitude,
      };

      await Weather.create(weatherRecord);

      return weatherRecord;
    });

    const weatherData = await Promise.all(weatherDataPromises);

    res.status(201).json({ message: 'Weather data saved successfully', data: weatherData });
  } catch (error:any) {
    res.status(500).json({ error: error.message });
  }
};